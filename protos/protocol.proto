// protos/protocol.proto
syntax = "proto3";

package enhanced_mcp;

service DistributedService {
  // Basic request-response for method invocation
  rpc InvokeMethod (MethodRequest) returns (MethodResponse);
  
  // Streaming API for events/notifications
  rpc SubscribeToEvents (EventSubscription) returns (stream EventNotification);
  
  // Health check for fault tolerance
  rpc HealthCheck (HealthCheckRequest) returns (HealthCheckResponse);
  
  // Capability discovery
  rpc DiscoverCapabilities (DiscoveryRequest) returns (CapabilitiesResponse);
}

// Request message for method invocation
message MethodRequest {
  string method_id = 1;
  bytes parameters = 2;
  string request_id = 3;
  
  // Authentication information
  string client_id = 4;
  string api_key = 5;
  string signature = 6;
  int64 timestamp = 7;
}

// Response message for method invocation
message MethodResponse {
  string request_id = 1;
  Status status = 2;
  bytes result = 3;
  string error_message = 4;
  
  enum Status {
    SUCCESS = 0;
    ERROR = 1;
    UNAUTHORIZED = 2;
    NOT_FOUND = 3;
    TIMEOUT = 4;
    SERVER_ERROR = 5;
  }
}

// Health check messages
message HealthCheckRequest {
  string client_id = 1;
}

message HealthCheckResponse {
  enum Status {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;
  }
  Status status = 1;
}

// Event subscription
message EventSubscription {
  string client_id = 1;
  string api_key = 2;
  string pattern = 3;
  string subscription_id = 4;
}

message EventNotification {
  string event_id = 1;
  string event_type = 2;
  bytes data = 3;
  int64 timestamp = 4;
}

// Capability discovery
message DiscoveryRequest {
  string client_id = 1;
  string api_key = 2;
}

message CapabilitiesResponse {
  repeated Capability capabilities = 1;
  
  message Capability {
    string id = 1;
    string name = 2;
    string description = 3;
    CapabilityType type = 4;
    string required_permission = 5;
    
    enum CapabilityType {
      METHOD = 0;
      RESOURCE = 1;
      EVENT = 2;
    }
  }
}